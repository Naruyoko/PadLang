(u+0000) - All variables are reset, except program pointer.
(u+0003) - It will pop from the stack, and sets the pointer to it.
(u+0005) - Returns the pointer variable.
(u+0006) - Returns the direction variable.
(u+0007) - Returns the stack variable.
(u+0008) - Returns the program variable.

(u+000a) - Force separates commands.
(u+000c) - Interrupts program and wait for user input. Returns the input as a str.

(u+000d) - Outputs the input. If not an str, then it is implicitly converted to str.
(u+0017) - Outputs the input and u+0020. If not an str, then it is implicitly converted to str.
(u+001a) - Returns the current value of the variable. If it is not a type variable, it is implicitly converted.
(u+001b) - Forcefully exit the program.
"(u+0022) - Initializes a str with content between this u+0022 and the next u+0022. The content will not be executed. Standard escape sequence applies.
#(u+0023) - Returns the length if the variable is str or array.
$(u+0024) - Assigns the first value after to the second. If the second is not a type variable, it is implicitly converted.
%(u+0025) - Takes modulo of two of int, uint, superint, superuint, float, double, or quadruple, and returns in the data type of two that are more expressible.
&(u+0026) - Performs logical "and" on two inputs.
'(u+0027) - If first value is an object, it returns the value of the label of second. If first value is an array, it will get the value of the second value-th element.
*(u+002a) - Multiplies two of int, uint, superint, superuint, float, double, or quadruple, and returns in the data type of two that are more expressible. If the first input is str and the second is either int, uint, superint, superuint, float, double, or quadruple, it will repeat the first input max(0,floor(second input)) times. If the first input is array and the second is either int, uint, superint, superuint, float, double, or quadruple, it will repeat the first input max(0,floor(second input)) times.
+(u+002b) - Adds two of int, uint, superint, superuint, float, double, or quadruple, and returns in the data type of two that are more expressible. If either of the two inputs are str, it will comvert to str and concatenates them. If both of the inputs are array, it will concatenate them. If only the first input is an array, it append add the second input to the first input. If only the second input is an array, it will prepend the first input to the second input. If both of the inputs are objects, add the properties of the second object to the first object, and if they share a property, the value of the second input will be prioritized.
,(u+002c) - If it is inside of an array literal, it separates elements. If it is inside an object literal, it will separate entries.
-(u+002d) - Subtracts two of int, uint, superint, superuint, float, double, or quadruple, and returns in the data type of two that are more expressible. If either of the two inputs are str, it will convert to str, then it will delete the last matching characters for each character in the second input from the first input. If both inputs are array, it will remove the last match to the elements of the second input from the first input. If only the first input is array, it will remove the last match to the second input from the first input. If both inputs are objects, it will remove last match of properties of the second input from the first input.
/(u+002f) - Divides two of int, uint, superint, superuint, float, double, or quadruple, and returns in the data type of two that are more expressible.
0(u+0030) - Initializes an int of value 0.
1(u+0031) - Initializes an int with itself then rest of consecutive decimal digits. Prevents the latter digits from creating more int.
2(u+0032) - Initializes an int with itself then rest of consecutive decimal digits. Prevents the latter digits from creating more int.
3(u+0033) - Initializes an int with itself then rest of consecutive decimal digits. Prevents the latter digits from creating more int.
4(u+0034) - Initializes an int with itself then rest of consecutive decimal digits. Prevents the latter digits from creating more int.
5(u+0035) - Initializes an int with itself then rest of consecutive decimal digits. Prevents the latter digits from creating more int.
6(u+0036) - Initializes an int with itself then rest of consecutive decimal digits. Prevents the latter digits from creating more int.
7(u+0037) - Initializes an int with itself then rest of consecutive decimal digits. Prevents the latter digits from creating more int.
8(u+0038) - Initializes an int with itself then rest of consecutive decimal digits. Prevents the latter digits from creating more int.
9(u+0039) - Initializes an int with itself then rest of consecutive decimal digits. Prevents the latter digits from creating more int.
:(u+003b) - If it is inside an object literal, it will separate label and value. Else, force separates command.
<(u+003c) - Returns boolean of whether if the first input is less than the second input.
=(u+003d) - Returns boolean of whether if the first input is equal to the second input.
>(u+003e) - Returns boolean of whether if the first input is greater than the second input.
@(u+0040) - If the first input is an array, it will return the variable corresponding to the second input-th index. If the first input is an object, it will return the variable corresponding to the label of the second input.
D(u+0044) - Dumps the value.
E(u+0045) - Performs logical "xor" on two inputs.
F(u+0045) - Initializes a function with first onput arguments, then that many variables after, then expression. The parameters are not accessible outside of the function call. The variable variables are actually overwritten by the variable of fuction itself followed by the name.
H(u+0048) - Outputs "Hello, World!".
I(u+0049) - Initializes an superint, with decimal number after it.
L(u+004c) - "do". Pushes to stack.
M(u+004d) - "do...while". If the expression is truly, it will pop and jump.
N(u+004e) - "do...until". If the expression is falsy, it will pop and jump.
U(u+0055) - Initializes an superuint, with decimal number after it.
[(u+005b) - Starts array literal.
](u+005d) - Ends array literal.
^(u+005e) - Exponentiates two of int, uint, superint, superuint, float, double, or quadruple, and returns in the data type of two that are more expressible.
`(u+0060) - Returns an empty str.
a(u+0061) - Converts variable to an array with one element which value is the input.
c(u+0063) - "if". If not immediately followed by u+0064, it will execute the next command if and only if the input was truly. If followed by u+0064, if the input was truly, it will jump after the u+0064. If it was falsy, it will jump after the next u+0065 or u+0066.
d(u+0064) - "then".
e(u+0065) - "else". Jump to the next u+0066.
f(u+0066) - "end if". No-op.
h(u+0068) - Returns str with value "Hello, World!"
i(u+0069) - Initializes an int, with decimal number after it.
l(u+006c) - Performs short-circuit "xor" on two inputs.
n(u+006d) - Performs short-circuit "and" on two inputs.
o(u+006f) - Performs short-circuit "or" on two inputs.
q(u+0071) - "for". Runs first expression. Then, if second expression is truly. push to stack, and skip third expression. If second expression is false, pop the stack, and jump after the next u+0072. If jumped from a u+0003, it will execute the third ones, then check for the second expression again.
r(u+0072) - "while". If the input expression is truly, it will push to the stack. If it is falsy, it will jump after the next u+0003.
s(u+0073) - Initializes a str, with length as int, uint, superint, or superuint and then the content. The content will not be executed.
u(u+0075) - Initializes an uint, with decimal number after it.
v(u+0076) - Initializes a variable with label the value following.
w(u+0077) - Returns an array of ints in range from the first input to the second input. If second input is less than the first input, it will be reversed range from the second input from the first input. Inclusive.
x(u+0078) - Returns an array of ints in range from from 0 to the input. If the input is negative it will instead be from input to 0. Inclusive.
{(u+007b) - Starts object literal.
|(u+007c) - Performs logical "or" on two inputs and returns a boolean.
}(u+007d) - Ends object literal.
~(u+007e) - Inverts the raw binary value.
¬´(u+00ab) - Shifts left the value of the first input by second input.
¬Ø(u+00af) - Increments the variable. If the input is not type variable, it is implicitly converted to variable.
¬∞(u+00b0) - Decrements the variable. If the input is not type variable, it is implicitly converted to variable.
¬±(u+00b1) - Negates value of int, superint, float, double, and quadruple. Reverses str and array.
¬≤(u+00b2) - Squares int, uint, superint, superuint, float, double, or quadruple.
¬≥(u+00b3) - Cubes int, uint, superint, superuint, float, double, or quadruple.
¬π(u+00b9) - Adds 1 to the input.
¬∫(u+00ba) - Subtracts 1 to the input.
¬ª(u+00bb) - Shifts right the value of the first input by second input.
¬ø(u+00bf) - Null command.
√Ä(u+00c0) - Pushes second input to the first input.
√Å(u+00c1) - Pops the input.
√Ç(u+00c2) - Unshifts second input to the first input.
√É(u+00c3) - Shifts the input.
√Ñ(u+00c4) - Inserts the second input at the index third input to the first input array.
√Ö(u+00c5) - Remove and returns the index second input from the first input.
√Ü(u+00c6) - Inserts multiple variables as elements of the second input at the index third input to the first input.
√á(u+00c7) - Removes and returns as array the second input amount of elements at the index third input from the first input.
√à(u+00c8) - Returns subarray of the second input amount of elements at the index third input from the first input.
√â(u+00c9) - Inserts second inputs at third input to first input str.
√ä(u+00ca) - Returns the substring of length third input from the index second input from the first input str.
√ã(u+00cb) - Returns the substring of length from the index second input to the index third input from the first input str.
√ê(u+00d0) - Returns superint with value of the input str as Base64.
√ë(u+00d1) - Returns superint with value of the input str as following bases: Prefix "0b" is binary; Prefix "0" is octal; Prefix "0x" is hexadecimal; and no prefix is decimal.
√í(u+00d2) - Returns str that expresses the input as Base64.
√ì(u+00d3) - Returns str that expresses the input as Base256.
√î(u+00d4) - Returns str that expresses the input as Base65536.
√ò(u+00d8) - Returns an empty array.
√ù(u+00dd) - Returns an str that expresses the first input in base-k system, with digits of the second input as str. If The second input is an empty str, return an empty str. If the second input is 1 character long, it will return the character repeated first input+1 times.
√û(u+00de) - Returns superint with value of the input str as Base256.
√ü(u+00df) - Returns superint with value of the input str as Base65536.
√∏(u+00f8) - Returns an empty object.
